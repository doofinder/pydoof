# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pydoof.models.data_sources import DataSources  # noqa: F401,E501
from pydoof.models.update_data_type import UpdateDataType  # noqa: F401,E501


class DataType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'object',
        'normalization': 'object',
        'preset': 'str',
        'name': 'str',
        'datasources': 'DataSources'
    }

    attribute_map = {
        'options': 'options',
        'normalization': 'normalization',
        'preset': 'preset',
        'name': 'name',
        'datasources': 'datasources'
    }

    def __init__(self, options=None, normalization=None, preset=None, name=None, datasources=None):  # noqa: E501
        """DataType - a model defined in Swagger"""  # noqa: E501

        self._options = None
        self._normalization = None
        self._preset = None
        self._name = None
        self._datasources = None
        self.discriminator = None

        if options is not None:
            self.options = options
        if normalization is not None:
            self.normalization = normalization
        self.preset = preset
        self.name = name
        if datasources is not None:
            self.datasources = datasources

    @property
    def options(self):
        """Gets the options of this DataType.  # noqa: E501

        Options of the datatype  # noqa: E501

        :return: The options of this DataType.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DataType.

        Options of the datatype  # noqa: E501

        :param options: The options of this DataType.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def normalization(self):
        """Gets the normalization of this DataType.  # noqa: E501

        Map the datafeed fields with doofinder fields  # noqa: E501

        :return: The normalization of this DataType.  # noqa: E501
        :rtype: object
        """
        return self._normalization

    @normalization.setter
    def normalization(self, normalization):
        """Sets the normalization of this DataType.

        Map the datafeed fields with doofinder fields  # noqa: E501

        :param normalization: The normalization of this DataType.  # noqa: E501
        :type: object
        """

        self._normalization = normalization

    @property
    def preset(self):
        """Gets the preset of this DataType.  # noqa: E501

        Preset of the datatype. One of (generic, product, page, category).  # noqa: E501

        :return: The preset of this DataType.  # noqa: E501
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this DataType.

        Preset of the datatype. One of (generic, product, page, category).  # noqa: E501

        :param preset: The preset of this DataType.  # noqa: E501
        :type: str
        """
        if preset is None:
            raise ValueError("Invalid value for `preset`, must not be `None`")  # noqa: E501
        allowed_values = ["generic", "product", "page", "category"]  # noqa: E501
        if preset not in allowed_values:
            raise ValueError(
                "Invalid value for `preset` ({0}), must be one of {1}"  # noqa: E501
                .format(preset, allowed_values)
            )

        self._preset = preset

    @property
    def name(self):
        """Gets the name of this DataType.  # noqa: E501

        Name of the datatype  # noqa: E501

        :return: The name of this DataType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataType.

        Name of the datatype  # noqa: E501

        :param name: The name of this DataType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def datasources(self):
        """Gets the datasources of this DataType.  # noqa: E501

        List of datasources  # noqa: E501

        :return: The datasources of this DataType.  # noqa: E501
        :rtype: DataSources
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this DataType.

        List of datasources  # noqa: E501

        :param datasources: The datasources of this DataType.  # noqa: E501
        :type: DataSources
        """

        self._datasources = datasources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
