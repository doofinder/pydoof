# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NewSearchEngine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stopwords': 'bool',
        'site_url': 'str',
        'name': 'str',
        'language': 'str'
    }

    attribute_map = {
        'stopwords': 'stopwords',
        'site_url': 'site_url',
        'name': 'name',
        'language': 'language'
    }

    def __init__(self, stopwords=None, site_url=None, name=None, language=None):  # noqa: E501
        """NewSearchEngine - a model defined in Swagger"""  # noqa: E501

        self._stopwords = None
        self._site_url = None
        self._name = None
        self._language = None
        self.discriminator = None

        if stopwords is not None:
            self.stopwords = stopwords
        if site_url is not None:
            self.site_url = site_url
        self.name = name
        self.language = language

    @property
    def stopwords(self):
        """Gets the stopwords of this NewSearchEngine.  # noqa: E501

        Ignore high-frequency terms like \"the\", \"and\", \"is\". These words have a low weight and contribute little to the relevance score.  # noqa: E501

        :return: The stopwords of this NewSearchEngine.  # noqa: E501
        :rtype: bool
        """
        return self._stopwords

    @stopwords.setter
    def stopwords(self, stopwords):
        """Sets the stopwords of this NewSearchEngine.

        Ignore high-frequency terms like \"the\", \"and\", \"is\". These words have a low weight and contribute little to the relevance score.  # noqa: E501

        :param stopwords: The stopwords of this NewSearchEngine.  # noqa: E501
        :type: bool
        """

        self._stopwords = stopwords

    @property
    def site_url(self):
        """Gets the site_url of this NewSearchEngine.  # noqa: E501

        The url of the site for the search engine  # noqa: E501

        :return: The site_url of this NewSearchEngine.  # noqa: E501
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """Sets the site_url of this NewSearchEngine.

        The url of the site for the search engine  # noqa: E501

        :param site_url: The site_url of this NewSearchEngine.  # noqa: E501
        :type: str
        """

        self._site_url = site_url

    @property
    def name(self):
        """Gets the name of this NewSearchEngine.  # noqa: E501

        A verbose name that helps to describe the search engine  # noqa: E501

        :return: The name of this NewSearchEngine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewSearchEngine.

        A verbose name that helps to describe the search engine  # noqa: E501

        :param name: The name of this NewSearchEngine.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def language(self):
        """Gets the language of this NewSearchEngine.  # noqa: E501

        An ISO 639-1 language code that determines the language of the search engine. E.g.: ‘es’.  # noqa: E501

        :return: The language of this NewSearchEngine.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this NewSearchEngine.

        An ISO 639-1 language code that determines the language of the search engine. E.g.: ‘es’.  # noqa: E501

        :param language: The language of this NewSearchEngine.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewSearchEngine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSearchEngine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
