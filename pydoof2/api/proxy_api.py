# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pydoof2.api_client import ApiClient


class ProxyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def logs(self, hashid, **kwargs):  # noqa: E501
        """List tasks logs  # noqa: E501

        List tasks detail logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logs_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.logs_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def logs_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """List tasks logs  # noqa: E501

        List tasks detail logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_details(self, hashid, task_id, **kwargs):  # noqa: E501
        """Get Task details  # noqa: E501

        Show the details of a given task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_details(hashid, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str task_id: Id of the task (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_details_with_http_info(hashid, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_details_with_http_info(hashid, task_id, **kwargs)  # noqa: E501
            return data

    def task_details_with_http_info(self, hashid, task_id, **kwargs):  # noqa: E501
        """Get Task details  # noqa: E501

        Show the details of a given task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_details_with_http_info(hashid, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str task_id: Id of the task (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `task_details`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `task_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/tasks/{task_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_process(self, hashid, **kwargs):  # noqa: E501
        """Process Search Engine Data Sources  # noqa: E501

        Schedule a task for process data sources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_process(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tasks_process_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_process_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def tasks_process_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Process Search Engine Data Sources  # noqa: E501

        Schedule a task for process data sources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tasks_process_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `tasks_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/tasks/process', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
