# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pydoof2.api_client import ApiClient


class TemporaryIndicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reindex_to_temp(self, hashid, name, **kwargs):  # noqa: E501
        """Reindex the content of the real index into the temporary one.  # noqa: E501

        This executes a reindexing operation between the real index and the temporary one, taking all items from real and creating them in the temporary. This will return a 404 (Not found) if there is no temporary index.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reindex_to_temp(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reindex_to_temp_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.reindex_to_temp_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def reindex_to_temp_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Reindex the content of the real index into the temporary one.  # noqa: E501

        This executes a reindexing operation between the real index and the temporary one, taking all items from real and creating them in the temporary. This will return a 404 (Not found) if there is no temporary index.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reindex_to_temp_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reindex_to_temp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `reindex_to_temp`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `reindex_to_temp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/_reindex_to_temp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_by_temp(self, hashid, name, **kwargs):  # noqa: E501
        """Replace the real index with the temporary one.  # noqa: E501

        This request takes the temporary index and \"overwrites\" the real one. Any content in the real index will be lost with this operation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_by_temp(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_by_temp_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_by_temp_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def replace_by_temp_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Replace the real index with the temporary one.  # noqa: E501

        This request takes the temporary index and \"overwrites\" the real one. Any content in the real index will be lost with this operation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_by_temp_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_by_temp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `replace_by_temp`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_by_temp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/_replace_by_temp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def temporary_index_create(self, hashid, name, **kwargs):  # noqa: E501
        """Creates a temporary index  # noqa: E501

        Creates a new temporary index for the given datatype. There could not be two temporary index at the same time so any request made to this endpoint when there is one created will fail. Creating a temporary index also set a lock preventing any changes on the search engine.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.temporary_index_create(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.temporary_index_create_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.temporary_index_create_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def temporary_index_create_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Creates a temporary index  # noqa: E501

        Creates a new temporary index for the given datatype. There could not be two temporary index at the same time so any request made to this endpoint when there is one created will fail. Creating a temporary index also set a lock preventing any changes on the search engine.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.temporary_index_create_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method temporary_index_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `temporary_index_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `temporary_index_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def temporary_index_delete(self, hashid, name, **kwargs):  # noqa: E501
        """Deletes the temporary index.  # noqa: E501

        Deletes the temporary index. This also removes the lock in the search engine. If there is no temporary index this will return a 404 (Not found).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.temporary_index_delete(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.temporary_index_delete_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.temporary_index_delete_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def temporary_index_delete_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Deletes the temporary index.  # noqa: E501

        Deletes the temporary index. This also removes the lock in the search engine. If there is no temporary index this will return a 404 (Not found).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.temporary_index_delete_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method temporary_index_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `temporary_index_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `temporary_index_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
