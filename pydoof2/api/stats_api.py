# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pydoof2.api_client import ApiClient


class StatsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def banners_clicks(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of clicks banners have got  # noqa: E501

        Gets how many times a banner has been clicked  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banners_clicks(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.banners_clicks_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.banners_clicks_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def banners_clicks_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of clicks banners have got  # noqa: E501

        Gets how many times a banner has been clicked  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banners_clicks_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banners_clicks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `banners_clicks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/banners/clicks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def banners_display(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of displays banners have got  # noqa: E501

        Gets how many times a banner has been shown  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banners_display(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.banners_display_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.banners_display_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def banners_display_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of displays banners have got  # noqa: E501

        Gets how many times a banner has been shown  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.banners_display_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method banners_display" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `banners_display`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/banners/display', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checkouts(self, hashid, **kwargs):  # noqa: E501
        """Get total checkouts  # noqa: E501

        Gets a total of the checkouts in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkouts(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.checkouts_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.checkouts_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def checkouts_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get total checkouts  # noqa: E501

        Gets a total of the checkouts in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkouts_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkouts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `checkouts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/checkouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def checkouts_by_date(self, hashid, **kwargs):  # noqa: E501
        """Get the checkouts by dates  # noqa: E501

        Gets a total of the checkouts aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkouts_by_date(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.checkouts_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.checkouts_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def checkouts_by_date_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the checkouts by dates  # noqa: E501

        Gets a total of the checkouts aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.checkouts_by_date_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id', 'query_name', 'total_hits', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method checkouts_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `checkouts_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501
        if 'query_name' in params:
            query_params.append(('query_name', params['query_name']))  # noqa: E501
        if 'total_hits' in params:
            query_params.append(('total_hits', params['total_hits']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/checkouts/by-date', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clicks(self, hashid, **kwargs):  # noqa: E501
        """Get total clicks  # noqa: E501

        Gets a total of the clicks in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clicks_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.clicks_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def clicks_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get total clicks  # noqa: E501

        Gets a total of the clicks in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clicks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `clicks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/clicks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clicks_by_date(self, hashid, **kwargs):  # noqa: E501
        """Get the clicks by dates  # noqa: E501

        Gets a total of the clicks aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_by_date(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clicks_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.clicks_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def clicks_by_date_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the clicks by dates  # noqa: E501

        Gets a total of the clicks aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_by_date_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id', 'query_name', 'total_hits', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clicks_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `clicks_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501
        if 'query_name' in params:
            query_params.append(('query_name', params['query_name']))  # noqa: E501
        if 'total_hits' in params:
            query_params.append(('total_hits', params['total_hits']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/clicks/by-date', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clicks_by_query(self, hashid, query, **kwargs):  # noqa: E501
        """Get the products clicked given a certain query  # noqa: E501

        Get the products clicked given a certain query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_by_query(hashid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str query: Search query term (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clicks_by_query_with_http_info(hashid, query, **kwargs)  # noqa: E501
        else:
            (data) = self.clicks_by_query_with_http_info(hashid, query, **kwargs)  # noqa: E501
            return data

    def clicks_by_query_with_http_info(self, hashid, query, **kwargs):  # noqa: E501
        """Get the products clicked given a certain query  # noqa: E501

        Get the products clicked given a certain query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_by_query_with_http_info(hashid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str query: Search query term (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'query', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clicks_by_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `clicks_by_query`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `clicks_by_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'query' in params:
            path_params['query'] = params['query']  # noqa: E501

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/clicks/by-query/{query}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clicks_top(self, hashid, **kwargs):  # noqa: E501
        """Get the most common clicks  # noqa: E501

        Gets a top of the clicks in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_top(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clicks_top_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.clicks_top_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def clicks_top_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the most common clicks  # noqa: E501

        Gets a top of the clicks in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clicks_top_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clicks_top" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `clicks_top`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/clicks/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inits(self, hashid, **kwargs):  # noqa: E501
        """Get total sessions started  # noqa: E501

        Gets a total of the sessions started in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inits(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.inits_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.inits_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def inits_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get total sessions started  # noqa: E501

        Gets a total of the sessions started in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inits_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `inits`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/inits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inits_by_date(self, hashid, **kwargs):  # noqa: E501
        """Get the sessions started by dates  # noqa: E501

        Gets a total of the sessions started aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inits_by_date(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.inits_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.inits_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def inits_by_date_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the sessions started by dates  # noqa: E501

        Gets a total of the sessions started aggregated in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inits_by_date_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id', 'query_name', 'total_hits', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inits_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `inits_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501
        if 'query_name' in params:
            query_params.append(('query_name', params['query_name']))  # noqa: E501
        if 'total_hits' in params:
            query_params.append(('total_hits', params['total_hits']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/inits/by-date', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def metrics(self, hashid, **kwargs):  # noqa: E501
        """Get the search engines usage.  # noqa: E501

        Gets the search engines usage, close to the current minute, but slow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.metrics_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.metrics_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def metrics_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the search engines usage.  # noqa: E501

        Gets the search engines usage, close to the current minute, but slow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.metrics_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirects(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of redirects done  # noqa: E501

        Gets how many times there's been a redirect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirects(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirects_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.redirects_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def redirects_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the total amount of redirects done  # noqa: E501

        Gets how many times there's been a redirect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirects_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `redirects`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/redirects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches(self, hashid, **kwargs):  # noqa: E501
        """Get total searches  # noqa: E501

        Gets a total of the searches in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def searches_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get total searches  # noqa: E501

        Gets a total of the searches in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `searches`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/searches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_by_click(self, hashid, dfid, **kwargs):  # noqa: E501
        """Get the top searches that got a product clicked  # noqa: E501

        Gets the top searches that got a click in a product, and how many times.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_by_click(hashid, dfid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dfid: Doofinder ID to filter by (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_by_click_with_http_info(hashid, dfid, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_by_click_with_http_info(hashid, dfid, **kwargs)  # noqa: E501
            return data

    def searches_by_click_with_http_info(self, hashid, dfid, **kwargs):  # noqa: E501
        """Get the top searches that got a product clicked  # noqa: E501

        Gets the top searches that got a click in a product, and how many times.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_by_click_with_http_info(hashid, dfid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dfid: Doofinder ID to filter by (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dfid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_by_click" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `searches_by_click`")  # noqa: E501
        # verify the required parameter 'dfid' is set
        if ('dfid' not in params or
                params['dfid'] is None):
            raise ValueError("Missing the required parameter `dfid` when calling `searches_by_click`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfid' in params:
            path_params['dfid'] = params['dfid']  # noqa: E501

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/clicks/{dfid}/searches/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_by_date(self, hashid, **kwargs):  # noqa: E501
        """Get the searches by dates  # noqa: E501

        Gets a total of the searches in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_by_date(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_by_date_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def searches_by_date_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the searches by dates  # noqa: E501

        Gets a total of the searches in a time period, separated by dates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_by_date_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str custom_results_id: Filter by custom results
        :param str query_name: Type of query to filter by
        :param int total_hits: Filter by total hits
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'custom_results_id', 'query_name', 'total_hits', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_by_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `searches_by_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'custom_results_id' in params:
            query_params.append(('custom_results_id', params['custom_results_id']))  # noqa: E501
        if 'query_name' in params:
            query_params.append(('query_name', params['query_name']))  # noqa: E501
        if 'total_hits' in params:
            query_params.append(('total_hits', params['total_hits']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/searches/by-date', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def searches_top(self, hashid, **kwargs):  # noqa: E501
        """Get the most common searches  # noqa: E501

        Gets a top of the searches in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_top(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.searches_top_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.searches_top_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def searches_top_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the most common searches  # noqa: E501

        Gets a top of the searches in a time period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.searches_top_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method searches_top" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `searches_top`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/searches/top', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usage(self, hashid, **kwargs):  # noqa: E501
        """Get the search engines usage.  # noqa: E501

        Gets the search engines usage, up until previous day, fast call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usage(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.usage_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.usage_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def usage_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """Get the search engines usage.  # noqa: E501

        Gets the search engines usage, up until previous day, fast call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.usage_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: HashID of the search engine to query or a list in the format [hashid1,hashid2,...] (required)
        :param str dto: Date end of the interval in the format of UNIX timestamp or YYYYMMDD. Today, by default.
        :param str dfrom: Date start of the interval in the format of UNIX timestamp or YYYYMMDD. By default, 10 days from current date.
        :param str tz: Timezone for the given dates, by default assumes UTC.
        :param str device: Device filter, by default is all
        :param str interval: Time interval for aggregations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'dto', 'dfrom', 'tz', 'device', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dto' in params:
            query_params.append(('dto', params['dto']))  # noqa: E501
        if 'dfrom' in params:
            query_params.append(('dfrom', params['dfrom']))  # noqa: E501
        if 'tz' in params:
            query_params.append(('tz', params['tz']))  # noqa: E501
        if 'hashid' in params:
            query_params.append(('hashid', params['hashid']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/stats/usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
