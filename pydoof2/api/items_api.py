# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pydoof2.api_client import ApiClient


class ItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def item_create(self, hashid, name, item, **kwargs):  # noqa: E501
        """Creates an item.  # noqa: E501

        Creates an item with the data provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_create(hashid, name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_create_with_http_info(hashid, name, item, **kwargs)  # noqa: E501
        else:
            (data) = self.item_create_with_http_info(hashid, name, item, **kwargs)  # noqa: E501
            return data

    def item_create_with_http_info(self, hashid, name, item, **kwargs):  # noqa: E501
        """Creates an item.  # noqa: E501

        Creates an item with the data provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_create_with_http_info(hashid, name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_create`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `item_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_delete(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Deletes an item.  # noqa: E501

        Deletes an item given its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_delete(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_delete_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.item_delete_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
            return data

    def item_delete_with_http_info(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Deletes an item.  # noqa: E501

        Deletes an item given its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_delete_with_http_info(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_delete`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/{item_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_index(self, hashid, name, **kwargs):  # noqa: E501
        """Scrolls through all items  # noqa: E501

        Starts a scroll through all items. Generate a scroll id that can be traversed with successive requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_index(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str scroll_id: Unique identifier for the scroll. The scroll saves a \"pointer\" to the last fetched page.
        :param int rpp: _Results per page_. How many items are fetched per page
        :return: Scroll
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_index_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.item_index_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def item_index_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Scrolls through all items  # noqa: E501

        Starts a scroll through all items. Generate a scroll id that can be traversed with successive requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_index_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str scroll_id: Unique identifier for the scroll. The scroll saves a \"pointer\" to the last fetched page.
        :param int rpp: _Results per page_. How many items are fetched per page
        :return: Scroll
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'scroll_id', 'rpp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_index`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'scroll_id' in params:
            query_params.append(('scroll_id', params['scroll_id']))  # noqa: E501
        if 'rpp' in params:
            query_params.append(('rpp', params['rpp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scroll',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_show(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Get an item  # noqa: E501

        Fetch an item from the search engine and datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_show(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_show_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.item_show_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
            return data

    def item_show_with_http_info(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Get an item  # noqa: E501

        Fetch an item from the search engine and datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_show_with_http_info(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_show`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_show`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/{item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_temp_create(self, hashid, name, item, **kwargs):  # noqa: E501
        """Creates an item in the temporal datatype  # noqa: E501

        Creates an item with the data provided in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_create(hashid, name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_temp_create_with_http_info(hashid, name, item, **kwargs)  # noqa: E501
        else:
            (data) = self.item_temp_create_with_http_info(hashid, name, item, **kwargs)  # noqa: E501
            return data

    def item_temp_create_with_http_info(self, hashid, name, item, **kwargs):  # noqa: E501
        """Creates an item in the temporal datatype  # noqa: E501

        Creates an item with the data provided in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_create_with_http_info(hashid, name, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_temp_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_temp_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_temp_create`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `item_temp_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_temp_delete(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Deletes an item in the temporal datatype  # noqa: E501

        Deletes an item given its id in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_delete(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_temp_delete_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.item_temp_delete_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
            return data

    def item_temp_delete_with_http_info(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Deletes an item in the temporal datatype  # noqa: E501

        Deletes an item given its id in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_delete_with_http_info(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_temp_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_temp_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_temp_delete`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_temp_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/{item_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_temp_index(self, hashid, name, **kwargs):  # noqa: E501
        """Scrolls through all items from the temporal datatype  # noqa: E501

        Starts a scroll through all items. Generate a scroll id that can be traversed with successive requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_index(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str scroll_id: Unique identifier for the scroll. The scroll saves a \"pointer\" to the last fetched page.
        :param int rpp: _Results per page_. How many items are fetched per page
        :return: Scroll
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_temp_index_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.item_temp_index_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def item_temp_index_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Scrolls through all items from the temporal datatype  # noqa: E501

        Starts a scroll through all items. Generate a scroll id that can be traversed with successive requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_index_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str scroll_id: Unique identifier for the scroll. The scroll saves a \"pointer\" to the last fetched page.
        :param int rpp: _Results per page_. How many items are fetched per page
        :return: Scroll
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'scroll_id', 'rpp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_temp_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_temp_index`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_temp_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'scroll_id' in params:
            query_params.append(('scroll_id', params['scroll_id']))  # noqa: E501
        if 'rpp' in params:
            query_params.append(('rpp', params['rpp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scroll',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_temp_show(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Get an item from the temporal datatype  # noqa: E501

        Fetch an item from the search engine and temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_show(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_temp_show_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.item_temp_show_with_http_info(hashid, name, item_id, **kwargs)  # noqa: E501
            return data

    def item_temp_show_with_http_info(self, hashid, name, item_id, **kwargs):  # noqa: E501
        """Get an item from the temporal datatype  # noqa: E501

        Fetch an item from the search engine and temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_show_with_http_info(hashid, name, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_temp_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_temp_show`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_temp_show`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_temp_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/{item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_temp_update(self, hashid, name, item_id, item, **kwargs):  # noqa: E501
        """Partially updates an item in the temporal datatype  # noqa: E501

        Partially updates an item and returns the indexed result in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_update(hashid, name, item_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_temp_update_with_http_info(hashid, name, item_id, item, **kwargs)  # noqa: E501
        else:
            (data) = self.item_temp_update_with_http_info(hashid, name, item_id, item, **kwargs)  # noqa: E501
            return data

    def item_temp_update_with_http_info(self, hashid, name, item_id, item, **kwargs):  # noqa: E501
        """Partially updates an item in the temporal datatype  # noqa: E501

        Partially updates an item and returns the indexed result in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_temp_update_with_http_info(hashid, name, item_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_temp_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_temp_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_temp_update`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_temp_update`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `item_temp_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/{item_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def item_update(self, hashid, name, item_id, item, **kwargs):  # noqa: E501
        """Partially updates an item.  # noqa: E501

        Partially updates an item and returns the indexed result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_update(hashid, name, item_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.item_update_with_http_info(hashid, name, item_id, item, **kwargs)  # noqa: E501
        else:
            (data) = self.item_update_with_http_info(hashid, name, item_id, item, **kwargs)  # noqa: E501
            return data

    def item_update_with_http_info(self, hashid, name, item_id, item, **kwargs):  # noqa: E501
        """Partially updates an item.  # noqa: E501

        Partially updates an item and returns the indexed result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.item_update_with_http_info(hashid, name, item_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param str item_id: Item unique identifier (required)
        :param Item item: Item fields (required)
        :return: Item
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'item_id', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method item_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `item_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `item_update`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if ('item_id' not in params or
                params['item_id'] is None):
            raise ValueError("Missing the required parameter `item_id` when calling `item_update`")  # noqa: E501
        # verify the required parameter 'item' is set
        if ('item' not in params or
                params['item'] is None):
            raise ValueError("Missing the required parameter `item` when calling `item_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item' in params:
            body_params = params['item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/{item_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Item',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_bulk_create(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Creates items in bulk  # noqa: E501

        Creates an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_create(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_bulk_create_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_bulk_create_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_bulk_create_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Creates items in bulk  # noqa: E501

        Creates an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_create_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_bulk_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_bulk_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_bulk_create`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_bulk_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/_bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_bulk_delete(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Deletes items in bulk  # noqa: E501

        Deletes an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_delete(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_bulk_delete_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_bulk_delete_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_bulk_delete_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Deletes items in bulk  # noqa: E501

        Deletes an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_delete_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_bulk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_bulk_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_bulk_delete`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_bulk_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/_bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_bulk_update(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Partial updates items in bulk  # noqa: E501

        Updates an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_update(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_bulk_update_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_bulk_update_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_bulk_update_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Partial updates items in bulk  # noqa: E501

        Updates an array of items in a single bulk operation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_bulk_update_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_bulk_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_bulk_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_bulk_update`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_bulk_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/items/_bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_temp_bulk_create(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Creates items in bulk in the temporal datatype  # noqa: E501

        Creates an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_create(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_temp_bulk_create_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_temp_bulk_create_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_temp_bulk_create_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Creates items in bulk in the temporal datatype  # noqa: E501

        Creates an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_create_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_temp_bulk_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_temp_bulk_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_temp_bulk_create`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_temp_bulk_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/_bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_temp_bulk_delete(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Deletes items in bulk in the temporal datatype  # noqa: E501

        Deletes an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_delete(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_temp_bulk_delete_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_temp_bulk_delete_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_temp_bulk_delete_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Deletes items in bulk in the temporal datatype  # noqa: E501

        Deletes an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_delete_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_temp_bulk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_temp_bulk_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_temp_bulk_delete`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_temp_bulk_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/_bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def items_temp_bulk_update(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Partial updates items in bulk in the temporal datatype  # noqa: E501

        Updates an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_update(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.items_temp_bulk_update_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
        else:
            (data) = self.items_temp_bulk_update_with_http_info(hashid, name, bulk, **kwargs)  # noqa: E501
            return data

    def items_temp_bulk_update_with_http_info(self, hashid, name, bulk, **kwargs):  # noqa: E501
        """Partial updates items in bulk in the temporal datatype  # noqa: E501

        Updates an array of items in a single bulk operation in the temporal datatype  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.items_temp_bulk_update_with_http_info(hashid, name, bulk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param BulkOperation bulk: Bulk data (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'bulk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method items_temp_bulk_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `items_temp_bulk_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `items_temp_bulk_update`")  # noqa: E501
        # verify the required parameter 'bulk' is set
        if ('bulk' not in params or
                params['bulk'] is None):
            raise ValueError("Missing the required parameter `bulk` when calling `items_temp_bulk_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk' in params:
            body_params = params['bulk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}/temp/items/_bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
