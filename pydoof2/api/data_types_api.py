# coding: utf-8

"""
    Doofinder API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doofinder.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pydoof2.api_client import ApiClient


class DataTypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def datatype_create(self, hashid, datatype, **kwargs):  # noqa: E501
        """Create a datatype  # noqa: E501

        Create new datatype for the given search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_create(hashid, datatype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param DataType datatype: DataType data (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datatype_create_with_http_info(hashid, datatype, **kwargs)  # noqa: E501
        else:
            (data) = self.datatype_create_with_http_info(hashid, datatype, **kwargs)  # noqa: E501
            return data

    def datatype_create_with_http_info(self, hashid, datatype, **kwargs):  # noqa: E501
        """Create a datatype  # noqa: E501

        Create new datatype for the given search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_create_with_http_info(hashid, datatype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param DataType datatype: DataType data (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'datatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datatype_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `datatype_create`")  # noqa: E501
        # verify the required parameter 'datatype' is set
        if ('datatype' not in params or
                params['datatype'] is None):
            raise ValueError("Missing the required parameter `datatype` when calling `datatype_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'datatype' in params:
            body_params = params['datatype']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datatype_delete(self, hashid, name, **kwargs):  # noqa: E501
        """Delete a datatype  # noqa: E501

        Delete a datatype for the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_delete(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datatype_delete_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.datatype_delete_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def datatype_delete_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Delete a datatype  # noqa: E501

        Delete a datatype for the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_delete_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datatype_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `datatype_delete`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `datatype_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datatype_index(self, hashid, **kwargs):  # noqa: E501
        """List datatypes  # noqa: E501

        List the datatypes of the given search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_index(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: DataTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datatype_index_with_http_info(hashid, **kwargs)  # noqa: E501
        else:
            (data) = self.datatype_index_with_http_info(hashid, **kwargs)  # noqa: E501
            return data

    def datatype_index_with_http_info(self, hashid, **kwargs):  # noqa: E501
        """List datatypes  # noqa: E501

        List the datatypes of the given search engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_index_with_http_info(hashid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :return: DataTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datatype_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `datatype_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datatype_show(self, hashid, name, **kwargs):  # noqa: E501
        """Get a datatype  # noqa: E501

        Get datatype of the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_show(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datatype_show_with_http_info(hashid, name, **kwargs)  # noqa: E501
        else:
            (data) = self.datatype_show_with_http_info(hashid, name, **kwargs)  # noqa: E501
            return data

    def datatype_show_with_http_info(self, hashid, name, **kwargs):  # noqa: E501
        """Get a datatype  # noqa: E501

        Get datatype of the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_show_with_http_info(hashid, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datatype_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `datatype_show`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `datatype_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datatype_update(self, hashid, name, datatype, **kwargs):  # noqa: E501
        """Update a datatype  # noqa: E501

        Update a datatype for the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_update(hashid, name, datatype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param UpdateDataType datatype: DataType data (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datatype_update_with_http_info(hashid, name, datatype, **kwargs)  # noqa: E501
        else:
            (data) = self.datatype_update_with_http_info(hashid, name, datatype, **kwargs)  # noqa: E501
            return data

    def datatype_update_with_http_info(self, hashid, name, datatype, **kwargs):  # noqa: E501
        """Update a datatype  # noqa: E501

        Update a datatype for the given search engine and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datatype_update_with_http_info(hashid, name, datatype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hashid: Search engine identifier (hashid) (required)
        :param str name: Name of the datatype (required)
        :param UpdateDataType datatype: DataType data (required)
        :return: DataType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hashid', 'name', 'datatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datatype_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hashid' is set
        if ('hashid' not in params or
                params['hashid'] is None):
            raise ValueError("Missing the required parameter `hashid` when calling `datatype_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `datatype_update`")  # noqa: E501
        # verify the required parameter 'datatype' is set
        if ('datatype' not in params or
                params['datatype'] is None):
            raise ValueError("Missing the required parameter `datatype` when calling `datatype_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hashid' in params:
            path_params['hashid'] = params['hashid']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'datatype' in params:
            body_params = params['datatype']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_token', 'jwt_token']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search_engines/{hashid}/datatypes/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
